#!/usr/local/bin/php
<?php

require __DIR__ . '/../vendor/autoload.php';

use Vertilia\Parser\OpenApiParser;
use Vertilia\Request\HttpRequest;
use Vertilia\Router\HttpRouter;

array_shift($argv);

// instantiate HttpRouter and parse routes from command line
$router = new HttpRouter(new HttpRequest([]), new OpenApiParser(), $argv);

// preprocess and output parsed routing table
echo "<?php return ";
$filter_map = [
    'int' => 'FILTER_VALIDATE_INT',
    'boolean' => 'FILTER_VALIDATE_BOOLEAN',
    'float' => 'FILTER_VALIDATE_FLOAT',
    'validate_regexp' => 'FILTER_VALIDATE_REGEXP',
    'validate_domain' => 'FILTER_VALIDATE_DOMAIN',
    'validate_url' => 'FILTER_VALIDATE_URL',
    'validate_email' => 'FILTER_VALIDATE_EMAIL',
    'validate_ip' => 'FILTER_VALIDATE_IP',
    'validate_mac' => 'FILTER_VALIDATE_MAC',
    'string' => 'FILTER_SANITIZE_STRING',
    'stripped' => 'FILTER_SANITIZE_STRIPPED',
    'encoded' => 'FILTER_SANITIZE_ENCODED',
    'special_chars' => 'FILTER_SANITIZE_SPECIAL_CHARS',
    'full_special_chars' => 'FILTER_SANITIZE_FULL_SPECIAL_CHARS',
    'unsafe_raw' => 'FILTER_UNSAFE_RAW',
    'email' => 'FILTER_SANITIZE_EMAIL',
    'url' => 'FILTER_SANITIZE_URL',
    'number_int' => 'FILTER_SANITIZE_NUMBER_INT',
    'number_float' => 'FILTER_SANITIZE_NUMBER_FLOAT',
    'magic_quotes' => 'FILTER_SANITIZE_MAGIC_QUOTES',
    'add_slashes' => 'FILTER_SANITIZE_ADD_SLASHES',
    'callback' => 'FILTER_CALLBACK',
];
$filter_name = [];
foreach (filter_list() as $f) {
    if (isset($filter_map[$f])) {
        $filter_name[filter_id($f)] = $filter_map[$f];
    }
}
$flag_name = [
    FILTER_FLAG_NONE => 'FILTER_FLAG_NONE',
    FILTER_REQUIRE_SCALAR => 'FILTER_REQUIRE_SCALAR',
    FILTER_REQUIRE_ARRAY => 'FILTER_REQUIRE_ARRAY',
    FILTER_FORCE_ARRAY => 'FILTER_FORCE_ARRAY',
    FILTER_NULL_ON_FAILURE => 'FILTER_NULL_ON_FAILURE',
    FILTER_FLAG_ALLOW_OCTAL => 'FILTER_FLAG_ALLOW_OCTAL',
    FILTER_FLAG_ALLOW_HEX => 'FILTER_FLAG_ALLOW_HEX',
    FILTER_FLAG_STRIP_LOW => 'FILTER_FLAG_STRIP_LOW',
    FILTER_FLAG_STRIP_HIGH => 'FILTER_FLAG_STRIP_HIGH',
    FILTER_FLAG_STRIP_BACKTICK => 'FILTER_FLAG_STRIP_BACKTICK',
    FILTER_FLAG_ENCODE_LOW => 'FILTER_FLAG_ENCODE_LOW',
    FILTER_FLAG_ENCODE_HIGH => 'FILTER_FLAG_ENCODE_HIGH',
    FILTER_FLAG_ENCODE_AMP => 'FILTER_FLAG_ENCODE_AMP',
    FILTER_FLAG_NO_ENCODE_QUOTES => 'FILTER_FLAG_NO_ENCODE_QUOTES',
    FILTER_FLAG_EMPTY_STRING_NULL => 'FILTER_FLAG_EMPTY_STRING_NULL',
    FILTER_FLAG_ALLOW_FRACTION => 'FILTER_FLAG_ALLOW_FRACTION',
    FILTER_FLAG_ALLOW_THOUSAND => 'FILTER_FLAG_ALLOW_THOUSAND',
    FILTER_FLAG_ALLOW_SCIENTIFIC => 'FILTER_FLAG_ALLOW_SCIENTIFIC',
    65536 => 'FILTER_FLAG_SCHEME_REQUIRED',
    131072 => 'FILTER_FLAG_HOST_REQUIRED',
    FILTER_FLAG_PATH_REQUIRED => 'FILTER_FLAG_PATH_REQUIRED',
    FILTER_FLAG_QUERY_REQUIRED => 'FILTER_FLAG_QUERY_REQUIRED',
    FILTER_FLAG_IPV4 => 'FILTER_FLAG_IPV4',
    FILTER_FLAG_IPV6 => 'FILTER_FLAG_IPV6',
    FILTER_FLAG_NO_RES_RANGE => 'FILTER_FLAG_NO_RES_RANGE',
    FILTER_FLAG_NO_PRIV_RANGE => 'FILTER_FLAG_NO_PRIV_RANGE',
    FILTER_FLAG_HOSTNAME => 'FILTER_FLAG_HOSTNAME',
    FILTER_FLAG_EMAIL_UNICODE => 'FILTER_FLAG_EMAIL_UNICODE',
    268435456 => 'FILTER_FLAG_GLOBAL_RANGE',
];
foreach (explode("\n", var_export($router->getParsedRoutes(), true)) as $line) {
    // if line contains 'filter'
    $line1 = preg_replace_callback(
        "/^(\\s+)'([^ ]+)' => (\\d+),\$/",
        function ($m) use ($filter_name) {
            return isset($filter_name[$m[3]])
                ? sprintf("%s'%s' => %s", $m[1], $m[2], $filter_name[$m[3]])
                : $m[0];
        },
        $line
    );
    // if line contains 'flags'
    $line2 = preg_replace_callback(
        "/^(\\s+)'flags' => (\\d+),\$/",
        function ($m) use ($flag_name) {
            if (isset($flag_name[$m[2]])) {
                return sprintf("%s'flags' => %s", $m[1], $flag_name[$m[2]]);
            } else {
                $f = [];
                $i = (int)$m[2];
                foreach ($flag_name as $k => $v) {
                    if (($k & $i) == $k and $k) {
                        $f[] = $v;
                    }
                }
                return $f
                    ? sprintf("%s'flags' => %s", $m[1], implode(' | ', $f))
                    : $m[0];
            }
        },
        $line1
    );
    echo $line2, "\n";
}
echo ";\n";
